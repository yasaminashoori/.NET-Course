using System;
using System.Diagnostics;
using System.Threading;
using System.Threading.Tasks;

namespace _58_Async_Await
{
    class Program
    {
        static async Task Main(string[] args)
        {
            var watch = new Stopwatch();
            watch.Start();

            var result = await UpdateProductInDataBase();
            // SendSmsToCUstomer();
            // SendSmsToSeller();

            Task.WaitAll(SendSmsToCUstomer(),
                        SendSmsToSeller());
            watch.Stop();

            Console.WriteLine(watch.ElapsedMilliseconds + " MS");
        }

        public static async Task<int> UpdateProductInDataBase()
        {
            await Task.Run(() =>
            {
                Thread.Sleep(5000);
                Console.WriteLine("Product updated !");
            });
            return 20;
        }
        
        public static async Task SendSmsToCUstomer()
        {
            await Task.Run(() =>
            {
                Thread.Sleep(3000);
                Console.WriteLine("Sms to customer send !");
            });
        }

        public static async Task SendSmsToSeller()
        {
            await Task.Run(() =>
            {
                Thread.Sleep(2000);
                Console.WriteLine("Sms to seller send !");
            });
        }
    }
}



            // 1-pouring coffee
            // 2- Fry Eggs
            // 3- Fry Bacon
            // 4- Toast bread
            // 4- Jam on bread 
            // 5-pour juice